· Use Cases
· Main Menu
1. Sign Up:
· Prompt for new customer details (name, address etc.) and the type of
account he wants to open. Add that customer based on necessary conditions
(e.g. min balance). On successful creation of new customer, display autogenerated
customer-id and account no. Prompt for a password and accept as
per password rules. Display success or error messages as applicable.
2. Sign In:
· Prompt for customer-id and password and validate. Allow maximum 3
consecutive re-trials for unsuccessful login attempts. Display error
messages as applicable.
3. Admin Sign In:
· Prompt for admin-id and password and validate. Allow 3 consecutive retrials
for successful login. Display success or error messages. Admin id and
password are fixed and stored in database.
4. Quit:
· Quit the application.
· Sub Menu - Option “2”
1. Address Change:
§ Prompt logged-in customer for new address and update as per entered
address. Display success or error messages.
2. Money Deposit:
§ Prompt logged-in customer for amount to be deposited and the account no.
Validate (e.g. amount should not be negative, account no. should be valid)
and update. Display the new balance.
3. Money Withdrawal:
§ Prompt logged-in customer for amount to be withdrawn and the account no.
Validate (e.g. amount should be less than available balance, min balance
condition should be maintained based on account type, account no. should
be valid) and update. Display the new balance.
§ Write unit test cases as per Boundary conditions to test this use case.
4. Print Statement:
§ Prompt logged-in customer for account no., “Date From” and “Date To”.
Validate the entered values (e.g. Dates are valid, “Date To” is greater than
“Date From”, account no. should be valid), and display print statement with
following values in a tabular format – Date, Transaction Type (Credit,
Debit), Amount, Balance
5. Transfer Money:
§ Prompt logged-in customer for “Account To” and amount. Validate the
entered values (e.g. “Account To” should be a valid account of any
customer, minimum balance in “Account From” should be maintained).
Update both accounts and display new balances. The transaction should be
atomic i.e. if account balance is not updated properly in either “Account
From” or “Account To”, entire transaction should be rolled back.
6. Account Closure:
§ Close the account so that no further operation like deposit, withdrawal is
allowed on that account. Display the amount to be sent to customer’s
address after his account closure, and give successful closure message.
7. Customer Logout:
§ Log out logged-in customer. Display successful logout message.
· Sub Menu - Option “3”
1. Print Closed Accounts History
§ Display in a tabular format the list of closed account no.s with respective
dates on which they were closed.
2. Admin Logout
§ Log out admin. Display successful logout message.
· Development Approach
· A group of 4 learners should develop the project in a collaborative manner on following
lines:
· All group members go through the specifications, understand, discuss and arrive at
an class diagram and database design in following format. Discuss the same with
faculty.
· Incorporate the feedback from faculty on correctness of class diagram and database
design to proceed with coding.
· Divide the coding work among all the group members and ensure that each member
writes and performs unit testing on his/her part of the code. Work can be divided
either based on class or use-case.
· Integrate the work and test the integrated application.